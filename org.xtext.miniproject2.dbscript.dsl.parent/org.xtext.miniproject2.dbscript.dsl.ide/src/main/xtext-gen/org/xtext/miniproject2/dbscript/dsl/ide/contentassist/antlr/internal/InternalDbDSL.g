/*
 * generated by Xtext 2.23.0
 */
grammar InternalDbDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.miniproject2.dbscript.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.miniproject2.dbscript.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.miniproject2.dbscript.dsl.services.DbDSLGrammarAccess;

}
@parser::members {
	private DbDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(DbDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDatabase
entryRuleDatabase
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatabaseAccess().getGroup()); }
		(rule__Database__Group__0)
		{ after(grammarAccess.getDatabaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractType
entryRuleAbstractType
:
{ before(grammarAccess.getAbstractTypeRule()); }
	 ruleAbstractType
{ after(grammarAccess.getAbstractTypeRule()); } 
	 EOF 
;

// Rule AbstractType
ruleAbstractType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractTypeAccess().getAlternatives()); }
		(rule__AbstractType__Alternatives)
		{ after(grammarAccess.getAbstractTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryKey
entryRulePrimaryKey
:
{ before(grammarAccess.getPrimaryKeyRule()); }
	 rulePrimaryKey
{ after(grammarAccess.getPrimaryKeyRule()); } 
	 EOF 
;

// Rule PrimaryKey
rulePrimaryKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getGroup()); }
		(rule__PrimaryKey__Group__0)
		{ after(grammarAccess.getPrimaryKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractTypeAccess().getPrimaryKeyParserRuleCall_0()); }
		rulePrimaryKey
		{ after(grammarAccess.getAbstractTypeAccess().getPrimaryKeyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractTypeAccess().getColumnParserRuleCall_1()); }
		ruleColumn
		{ after(grammarAccess.getAbstractTypeAccess().getColumnParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_0()); }
		('int')
		{ after(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_1()); }
		('varchar(255)')
		{ after(grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDATEEnumLiteralDeclaration_2()); }
		('datetime')
		{ after(grammarAccess.getTypeAccess().getDATEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getAUTOINCREMENTEnumLiteralDeclaration_3()); }
		('AutoNumber')
		{ after(grammarAccess.getTypeAccess().getAUTOINCREMENTEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__0__Impl
	rule__Database__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getDatabaseKeyword_0()); }
	'database'
	{ after(grammarAccess.getDatabaseAccess().getDatabaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__1__Impl
	rule__Database__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getNameAssignment_1()); }
	(rule__Database__NameAssignment_1)
	{ after(grammarAccess.getDatabaseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__2__Impl
	rule__Database__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getDatabaseAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__3__Impl
	rule__Database__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getTablesAssignment_3()); }
	(rule__Database__TablesAssignment_3)*
	{ after(grammarAccess.getDatabaseAccess().getTablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getInsertsAssignment_4()); }
	(rule__Database__InsertsAssignment_4)*
	{ after(grammarAccess.getDatabaseAccess().getInsertsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getTableKeyword_0()); }
	'table'
	{ after(grammarAccess.getTableAccess().getTableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
	(rule__Table__NameAssignment_1)
	{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getTableAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColumnsAssignment_3()); }
	(rule__Table__ColumnsAssignment_3)*
	{ after(grammarAccess.getTableAccess().getColumnsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__0__Impl
	rule__PrimaryKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getIdKeyword_0()); }
	'id'
	{ after(grammarAccess.getPrimaryKeyAccess().getIdKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__1__Impl
	rule__PrimaryKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getNameAssignment_1()); }
	(rule__PrimaryKey__NameAssignment_1)
	{ after(grammarAccess.getPrimaryKeyAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__2__Impl
	rule__PrimaryKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getPrimaryKeyAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__3__Impl
	rule__PrimaryKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getTypeAssignment_3()); }
	(rule__PrimaryKey__TypeAssignment_3)
	{ after(grammarAccess.getPrimaryKeyAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
	(rule__PrimaryKey__Group_4__0)?
	{ after(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__0__Impl
	rule__PrimaryKey__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getEqualsSignGreaterThanSignKeyword_4_0()); }
	'=>'
	{ after(grammarAccess.getPrimaryKeyAccess().getEqualsSignGreaterThanSignKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getAutoIncrementAssignment_4_1()); }
	(rule__PrimaryKey__AutoIncrementAssignment_4_1)
	{ after(grammarAccess.getPrimaryKeyAccess().getAutoIncrementAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
	'column'
	{ after(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameAssignment_1()); }
	(rule__Column__NameAssignment_1)
	{ after(grammarAccess.getColumnAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getHyphenMinusKeyword_2()); }
	'-'
	{ after(grammarAccess.getColumnAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
	rule__Column__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getTypeAssignment_3()); }
	(rule__Column__TypeAssignment_3)
	{ after(grammarAccess.getColumnAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getGroup_4()); }
	(rule__Column__Group_4__0)?
	{ after(grammarAccess.getColumnAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__0__Impl
	rule__Column__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getFKeyword_4_0()); }
	'f('
	{ after(grammarAccess.getColumnAccess().getFKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__1__Impl
	rule__Column__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getSourceTableAssignment_4_1()); }
	(rule__Column__SourceTableAssignment_4_1)
	{ after(grammarAccess.getColumnAccess().getSourceTableAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__2__Impl
	rule__Column__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getEqualsSignGreaterThanSignKeyword_4_2()); }
	'=>'
	{ after(grammarAccess.getColumnAccess().getEqualsSignGreaterThanSignKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__3__Impl
	rule__Column__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getFkeyAssignment_4_3()); }
	(rule__Column__FkeyAssignment_4_3)
	{ after(grammarAccess.getColumnAccess().getFkeyAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getRightParenthesisKeyword_4_4()); }
	')'
	{ after(grammarAccess.getColumnAccess().getRightParenthesisKeyword_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getInsertAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
	rule__Insert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getTableAssignment_1()); }
	(rule__Insert__TableAssignment_1)
	{ after(grammarAccess.getInsertAccess().getTableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__2__Impl
	rule__Insert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getInsertAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__3__Impl
	rule__Insert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getVarAssignment_3()); }
	(rule__Insert__VarAssignment_3)*
	{ after(grammarAccess.getInsertAccess().getVarAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__4__Impl
	rule__Insert__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getGroup_4()); }
	(rule__Insert__Group_4__0)*
	{ after(grammarAccess.getInsertAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getRightParenthesisSemicolonKeyword_5()); }
	');'
	{ after(grammarAccess.getInsertAccess().getRightParenthesisSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_4__0__Impl
	rule__Insert__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getInsertAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getVarAssignment_4_1()); }
	(rule__Insert__VarAssignment_4_1)
	{ after(grammarAccess.getInsertAccess().getVarAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Database__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__TablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_3_0()); }
		ruleTable
		{ after(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__InsertsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatabaseAccess().getInsertsInsertParserRuleCall_4_0()); }
		ruleInsert
		{ after(grammarAccess.getDatabaseAccess().getInsertsInsertParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColumnsAbstractTypeParserRuleCall_3_0()); }
		ruleAbstractType
		{ after(grammarAccess.getTableAccess().getColumnsAbstractTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPrimaryKeyAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getTypeTypeEnumRuleCall_3_0()); }
		ruleType
		{ after(grammarAccess.getPrimaryKeyAccess().getTypeTypeEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__AutoIncrementAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getAutoIncrementTypeEnumRuleCall_4_1_0()); }
		ruleType
		{ after(grammarAccess.getPrimaryKeyAccess().getAutoIncrementTypeEnumRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getTypeTypeEnumRuleCall_3_0()); }
		ruleType
		{ after(grammarAccess.getColumnAccess().getTypeTypeEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__SourceTableAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getSourceTableTableCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getColumnAccess().getSourceTableTableIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getColumnAccess().getSourceTableTableIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getColumnAccess().getSourceTableTableCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__FkeyAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getFkeySTRINGTerminalRuleCall_4_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getColumnAccess().getFkeySTRINGTerminalRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__TableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getTableTableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getInsertAccess().getTableTableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInsertAccess().getTableTableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getInsertAccess().getTableTableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__VarAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getVarSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getInsertAccess().getVarSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__VarAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getVarSTRINGTerminalRuleCall_4_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getInsertAccess().getVarSTRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
