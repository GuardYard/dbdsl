/*
 * generated by Xtext 2.23.0
 */
package org.xtext.miniproject2.dbscript.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.miniproject2.dbscript.dsl.ide.contentassist.antlr.internal.InternalDbDSLParser;
import org.xtext.miniproject2.dbscript.dsl.services.DbDSLGrammarAccess;

public class DbDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DbDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DbDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractTypeAccess().getAlternatives(), "rule__AbstractType__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getDatabaseAccess().getGroup(), "rule__Database__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getPrimaryKeyAccess().getGroup(), "rule__PrimaryKey__Group__0");
			builder.put(grammarAccess.getPrimaryKeyAccess().getGroup_4(), "rule__PrimaryKey__Group_4__0");
			builder.put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
			builder.put(grammarAccess.getColumnAccess().getGroup_4(), "rule__Column__Group_4__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup_4(), "rule__Insert__Group_4__0");
			builder.put(grammarAccess.getDatabaseAccess().getNameAssignment_1(), "rule__Database__NameAssignment_1");
			builder.put(grammarAccess.getDatabaseAccess().getTablesAssignment_3(), "rule__Database__TablesAssignment_3");
			builder.put(grammarAccess.getDatabaseAccess().getInsertsAssignment_4(), "rule__Database__InsertsAssignment_4");
			builder.put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
			builder.put(grammarAccess.getTableAccess().getColumnsAssignment_3(), "rule__Table__ColumnsAssignment_3");
			builder.put(grammarAccess.getPrimaryKeyAccess().getNameAssignment_1(), "rule__PrimaryKey__NameAssignment_1");
			builder.put(grammarAccess.getPrimaryKeyAccess().getTypeAssignment_3(), "rule__PrimaryKey__TypeAssignment_3");
			builder.put(grammarAccess.getPrimaryKeyAccess().getAutoIncrementAssignment_4_1(), "rule__PrimaryKey__AutoIncrementAssignment_4_1");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment_1(), "rule__Column__NameAssignment_1");
			builder.put(grammarAccess.getColumnAccess().getTypeAssignment_3(), "rule__Column__TypeAssignment_3");
			builder.put(grammarAccess.getColumnAccess().getSourceTableAssignment_4_1(), "rule__Column__SourceTableAssignment_4_1");
			builder.put(grammarAccess.getColumnAccess().getFkeyAssignment_4_3(), "rule__Column__FkeyAssignment_4_3");
			builder.put(grammarAccess.getInsertAccess().getTableAssignment_1(), "rule__Insert__TableAssignment_1");
			builder.put(grammarAccess.getInsertAccess().getVarAssignment_3(), "rule__Insert__VarAssignment_3");
			builder.put(grammarAccess.getInsertAccess().getVarAssignment_4_1(), "rule__Insert__VarAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DbDSLGrammarAccess grammarAccess;

	@Override
	protected InternalDbDSLParser createParser() {
		InternalDbDSLParser result = new InternalDbDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DbDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DbDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
