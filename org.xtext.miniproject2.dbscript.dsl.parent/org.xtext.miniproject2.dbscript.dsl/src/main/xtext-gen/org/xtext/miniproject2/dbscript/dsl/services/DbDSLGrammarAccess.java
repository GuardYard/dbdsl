/*
 * generated by Xtext 2.23.0
 */
package org.xtext.miniproject2.dbscript.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DbDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTablesTableParserRuleCall_3_0 = (RuleCall)cTablesAssignment_3.eContents().get(0);
		private final Assignment cInsertsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInsertsInsertParserRuleCall_4_0 = (RuleCall)cInsertsAssignment_4.eContents().get(0);
		
		//Database:
		//	'database' name=ID ':'
		//	tables+=Table*
		//	inserts+=Insert*;
		@Override public ParserRule getRule() { return rule; }
		
		//'database' name=ID ':' tables+=Table* inserts+=Insert*
		public Group getGroup() { return cGroup; }
		
		//'database'
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//tables+=Table*
		public Assignment getTablesAssignment_3() { return cTablesAssignment_3; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_3_0() { return cTablesTableParserRuleCall_3_0; }
		
		//inserts+=Insert*
		public Assignment getInsertsAssignment_4() { return cInsertsAssignment_4; }
		
		//Insert
		public RuleCall getInsertsInsertParserRuleCall_4_0() { return cInsertsInsertParserRuleCall_4_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnsAbstractTypeParserRuleCall_3_0 = (RuleCall)cColumnsAssignment_3.eContents().get(0);
		
		//Table:
		//	'table' name=ID ':'
		//	columns+=AbstractType*;
		@Override public ParserRule getRule() { return rule; }
		
		//'table' name=ID ':' columns+=AbstractType*
		public Group getGroup() { return cGroup; }
		
		//'table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//columns+=AbstractType*
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//AbstractType
		public RuleCall getColumnsAbstractTypeParserRuleCall_3_0() { return cColumnsAbstractTypeParserRuleCall_3_0; }
	}
	public class AbstractTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.AbstractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryKeyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractType:
		//	PrimaryKey | Column;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryKey | Column
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryKey
		public RuleCall getPrimaryKeyParserRuleCall_0() { return cPrimaryKeyParserRuleCall_0; }
		
		//Column
		public RuleCall getColumnParserRuleCall_1() { return cColumnParserRuleCall_1; }
	}
	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.PrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAutoIncrementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAutoIncrementTypeEnumRuleCall_4_1_0 = (RuleCall)cAutoIncrementAssignment_4_1.eContents().get(0);
		
		//PrimaryKey:
		//	'id' name=ID '-' type=Type ('=>' autoIncrement=Type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'id' name=ID '-' type=Type ('=>' autoIncrement=Type)?
		public Group getGroup() { return cGroup; }
		
		//'id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }
		
		//('=>' autoIncrement=Type)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4_0() { return cEqualsSignGreaterThanSignKeyword_4_0; }
		
		//autoIncrement=Type
		public Assignment getAutoIncrementAssignment_4_1() { return cAutoIncrementAssignment_4_1; }
		
		//Type
		public RuleCall getAutoIncrementTypeEnumRuleCall_4_1_0() { return cAutoIncrementTypeEnumRuleCall_4_1_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceTableAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSourceTableTableCrossReference_4_1_0 = (CrossReference)cSourceTableAssignment_4_1.eContents().get(0);
		private final RuleCall cSourceTableTableIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSourceTableTableCrossReference_4_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cFkeyAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cFkeySTRINGTerminalRuleCall_4_3_0 = (RuleCall)cFkeyAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//Column:
		//	'column' name=ID '-' type=Type ('f(' sourceTable=[Table] '=>' fkey=STRING ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'column' name=ID '-' type=Type ('f(' sourceTable=[Table] '=>' fkey=STRING ')')?
		public Group getGroup() { return cGroup; }
		
		//'column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }
		
		//('f(' sourceTable=[Table] '=>' fkey=STRING ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'f('
		public Keyword getFKeyword_4_0() { return cFKeyword_4_0; }
		
		//sourceTable=[Table]
		public Assignment getSourceTableAssignment_4_1() { return cSourceTableAssignment_4_1; }
		
		//[Table]
		public CrossReference getSourceTableTableCrossReference_4_1_0() { return cSourceTableTableCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSourceTableTableIDTerminalRuleCall_4_1_0_1() { return cSourceTableTableIDTerminalRuleCall_4_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4_2() { return cEqualsSignGreaterThanSignKeyword_4_2; }
		
		//fkey=STRING
		public Assignment getFkeyAssignment_4_3() { return cFkeyAssignment_4_3; }
		
		//STRING
		public RuleCall getFkeySTRINGTerminalRuleCall_4_3_0() { return cFkeySTRINGTerminalRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTableTableCrossReference_1_0 = (CrossReference)cTableAssignment_1.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_1_0_1 = (RuleCall)cTableTableCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarSTRINGTerminalRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVarAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVarSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cVarAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Insert:
		//	"add" table=[Table] '(' var+=STRING* (',' var+=STRING)* ');';
		@Override public ParserRule getRule() { return rule; }
		
		//"add" table=[Table] '(' var+=STRING* (',' var+=STRING)* ');'
		public Group getGroup() { return cGroup; }
		
		//"add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//table=[Table]
		public Assignment getTableAssignment_1() { return cTableAssignment_1; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_1_0() { return cTableTableCrossReference_1_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_1_0_1() { return cTableTableIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var+=STRING*
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//STRING
		public RuleCall getVarSTRINGTerminalRuleCall_3_0() { return cVarSTRINGTerminalRuleCall_3_0; }
		
		//(',' var+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//var+=STRING
		public Assignment getVarAssignment_4_1() { return cVarAssignment_4_1; }
		
		//STRING
		public RuleCall getVarSTRINGTerminalRuleCall_4_1_0() { return cVarSTRINGTerminalRuleCall_4_1_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_5() { return cRightParenthesisSemicolonKeyword_5; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miniproject2.dbscript.dsl.DbDSL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTEGERIntKeyword_0_0 = (Keyword)cINTEGEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTEXTVarchar255Keyword_1_0 = (Keyword)cTEXTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDATEDatetimeKeyword_2_0 = (Keyword)cDATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAUTOINCREMENTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAUTOINCREMENTAutoNumberKeyword_3_0 = (Keyword)cAUTOINCREMENTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Type:
		//	INTEGER='int'
		//	| TEXT='varchar(255)'
		//	| DATE='datetime'
		//	| AUTOINCREMENT="AutoNumber";
		public EnumRule getRule() { return rule; }
		
		//INTEGER='int' | TEXT='varchar(255)' | DATE='datetime' | AUTOINCREMENT="AutoNumber"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER='int'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_0() { return cINTEGEREnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getINTEGERIntKeyword_0_0() { return cINTEGERIntKeyword_0_0; }
		
		//TEXT='varchar(255)'
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_1() { return cTEXTEnumLiteralDeclaration_1; }
		
		//'varchar(255)'
		public Keyword getTEXTVarchar255Keyword_1_0() { return cTEXTVarchar255Keyword_1_0; }
		
		//DATE='datetime'
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_2() { return cDATEEnumLiteralDeclaration_2; }
		
		//'datetime'
		public Keyword getDATEDatetimeKeyword_2_0() { return cDATEDatetimeKeyword_2_0; }
		
		//AUTOINCREMENT="AutoNumber"
		public EnumLiteralDeclaration getAUTOINCREMENTEnumLiteralDeclaration_3() { return cAUTOINCREMENTEnumLiteralDeclaration_3; }
		
		//"AutoNumber"
		public Keyword getAUTOINCREMENTAutoNumberKeyword_3_0() { return cAUTOINCREMENTAutoNumberKeyword_3_0; }
	}
	
	private final DatabaseElements pDatabase;
	private final TableElements pTable;
	private final AbstractTypeElements pAbstractType;
	private final PrimaryKeyElements pPrimaryKey;
	private final ColumnElements pColumn;
	private final InsertElements pInsert;
	private final TypeElements eType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DbDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDatabase = new DatabaseElements();
		this.pTable = new TableElements();
		this.pAbstractType = new AbstractTypeElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pColumn = new ColumnElements();
		this.pInsert = new InsertElements();
		this.eType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.miniproject2.dbscript.dsl.DbDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Database:
	//	'database' name=ID ':'
	//	tables+=Table*
	//	inserts+=Insert*;
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}
	
	//Table:
	//	'table' name=ID ':'
	//	columns+=AbstractType*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//AbstractType:
	//	PrimaryKey | Column;
	public AbstractTypeElements getAbstractTypeAccess() {
		return pAbstractType;
	}
	
	public ParserRule getAbstractTypeRule() {
		return getAbstractTypeAccess().getRule();
	}
	
	//PrimaryKey:
	//	'id' name=ID '-' type=Type ('=>' autoIncrement=Type)?;
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}
	
	//Column:
	//	'column' name=ID '-' type=Type ('f(' sourceTable=[Table] '=>' fkey=STRING ')')?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Insert:
	//	"add" table=[Table] '(' var+=STRING* (',' var+=STRING)* ');';
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//enum Type:
	//	INTEGER='int'
	//	| TEXT='varchar(255)'
	//	| DATE='datetime'
	//	| AUTOINCREMENT="AutoNumber";
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
